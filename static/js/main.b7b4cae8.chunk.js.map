{"version":3,"sources":["components/Editor/Editor.module.scss","layouts/Header/Header.jsx","layouts/MainLayout/MainLayout.jsx","components/Editor/Editor.jsx","pages/Playground/Playground.jsx","App.jsx","serviceWorker.js","index.js","layouts/Header/Header.module.scss","layouts/MainLayout/MainLayout.module.scss"],"names":["module","exports","Header","className","styles","theme","mode","Item","target","rel","href","GithubFilled","MainLayout","children","classNames","example","Editor","useState","script","setScript","error","msg","response","setResponse","running","setRunning","run","a","fetch","method","body","JSON","stringify","res","json","resJSON","Error","Response","message","width","tabSize","fontSize","showPrintMargin","value","onChange","type","onClick","loading","icon","CaretRightFilled","beautifiedScript","js","indent_size","space_in_empty_paren","replace","ClearOutlined","ReloadOutlined","Playground","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b7b4cae8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Editor\":\"Editor_Editor__1Orlo\"};","import React from 'react';\nimport { Layout, Menu } from 'antd';\nimport { GithubFilled } from '@ant-design/icons';\n\nimport styles from './Header.module.scss';\n\nconst Header = () => {\n  return (\n    <Layout.Header className={styles.Header}>\n      <div>COVIDScript</div>\n      <div className=\"ml-auto\">\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          <Menu.Item>Documents</Menu.Item>\n          <Menu.Item>Playground</Menu.Item>\n          <Menu.Item>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/dhl1402/covidscript\"\n            >\n              <GithubFilled />\n            </a>\n          </Menu.Item>\n        </Menu>\n      </div>\n    </Layout.Header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Layout } from 'antd';\nimport classNames from 'classnames';\n\nimport Header from '../Header/Header';\n\nimport styles from './MainLayout.module.scss';\n\nconst MainLayout = ({ children, className }) => {\n  return (\n    <Layout className={classNames(styles.MainLayout, className)}>\n      <Header />\n      {children}\n    </Layout>\n  );\n};\n\nexport default MainLayout;\n","import React, { useState } from 'react';\nimport AceEditor from 'react-ace';\nimport { Button } from 'antd';\nimport { CaretRightFilled, ClearOutlined, ReloadOutlined } from '@ant-design/icons';\nimport { js } from 'js-beautify';\nimport classNames from 'classnames';\n\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/theme-nord_dark';\n\nimport styles from './Editor.module.scss';\n\nconst example = `func sayHello(name) {\n  echo(\"Hello world, my name is\", name, \"!!!\")\n}\n\nsayHello(\"nCovi\")`;\n\nconst Editor = ({ className }) => {\n  const [script, setScript] = useState(example);\n  const [response, setResponse] = useState({ error: '', msg: '' });\n  const [running, setRunning] = useState(false);\n\n  const run = async () => {\n    try {\n      setRunning(true);\n      setResponse({ error: '', msg: '' });\n      const res = await fetch('https://covidscript.herokuapp.com/api/v1/interpret', {\n        method: 'POST',\n        body: JSON.stringify({ script }),\n      });\n      const resJSON = await res.json();\n      setResponse({ error: resJSON.Error, msg: resJSON.Response });\n    } catch (e) {\n      setResponse({ error: e.message });\n    } finally {\n      setRunning(false);\n    }\n  };\n\n  const format = () => {\n    const beautifiedScript = js(script, { indent_size: 2, space_in_empty_paren: true });\n    setScript(beautifiedScript.replace(/: =/g, ' :='));\n  };\n\n  const reset = () => {\n    setScript(example);\n    setResponse({ error: '', msg: '' });\n  };\n\n  return (\n    <div className={classNames(styles.Editor, className)}>\n      <div className=\"editor\">\n        <AceEditor\n          mode=\"javascript\"\n          theme=\"nord_dark\"\n          width=\"100%\"\n          tabSize={2}\n          fontSize={14}\n          showPrintMargin={false}\n          value={script}\n          onChange={setScript}\n        />\n        <div className=\"output\">\n          {running && <div>Waiting for remote server...</div>}\n          {response.error && <div className=\"error\">{response.error}</div>}\n          {response.msg && (\n            <div>\n              <div>{response.msg}</div>\n              <div className=\"note\">Program exited.</div>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"mt-3\">\n        <Button type=\"primary\" onClick={run} loading={running} icon={<CaretRightFilled />}>\n          Run\n        </Button>\n        <Button className=\"ml-2\" onClick={format} type=\"primary\" icon={<ClearOutlined />}>\n          Format\n        </Button>\n        <Button className=\"ml-2\" onClick={reset} type=\"primary\" icon={<ReloadOutlined />}>\n          Reset\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Editor;\n","import React from 'react';\n\nimport { MainLayout } from 'layouts';\nimport { Editor } from 'components';\n\nimport styles from './Playground.module.scss';\n\nconst Playground = () => {\n  return (\n    <MainLayout>\n      <div className={styles.Playground}>\n        <Editor className=\"p-3\" />\n      </div>\n    </MainLayout>\n  );\n};\n\nexport default Playground;\n","import React from 'react';\n\nimport Playground from './pages/Playground/Playground';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Playground />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2xLui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainLayout\":\"MainLayout_MainLayout__1CghC\"};"],"sourceRoot":""}